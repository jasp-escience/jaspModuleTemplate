name: Post-Merge Repository Creation and Revert Pull Request

on:
  workflow_dispatch:
# on:
#   pull_request_target:
#     types:
#       - closed # Trigger when a pull request is closed (merged or not)

permissions: {}

jobs:
  create_new_repository:
    if: github.event.pull_request.merged == true && github.event.pull_request.head.repo.fork == true && github.event.pull_request.head.repo.owner.login != 'jasp-escience'
    runs-on: ubuntu-24.04

    outputs: # Define output variables. We need these to pass information between jobs
      module_name: ${{ steps.extract_vars.outputs.module_name }}
    env:
      ORG_PAT: ${{ secrets.ORG_PAT }} # N.B. Check validity of Personal Access Token with org scope
      ORG_NAME: "jasp-escience" # N.B. Replace with  actual organization name

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all branches and commit history
          persist-credentials: false # Do not persist credentials to the git config

      - name: Extract Package Name from DESCRIPTION
        id: extract_vars
        run: |
          # PACKAGE_NAME=$(grep "^Package:" DESCRIPTION | awk '{print $2}')
          PACKAGE_NAME=$(awk -F ': ' '/^Package:/ {print $2}' DESCRIPTION | tr -d '\r')
          if [ -z "$PACKAGE_NAME" ]; then
            echo "Error: Package name not found in DESCRIPTION" >&2
            exit 1
          fi
          # Prevent special characters in package name
          if [[ ! "$PACKAGE_NAME" =~ ^[a-zA-Z0-9_-]+$ ]]; then
            echo "Error: PACKAGE_NAME contains invalid characters!" >&2
            exit 1
          fi
          echo "MODULE_NAME=${PACKAGE_NAME}-module" >> $GITHUB_ENV
          echo "module_name=${PACKAGE_NAME}-module" >> $GITHUB_OUTPUT
        shell: bash

      - name: Create New Repository in Organization
        run: |
          REPO_NAME="${ORG_NAME}/${{ env.MODULE_NAME }}"
          echo "Creating repository $REPO_NAME..."
          RESPONSE=$(curl -X POST -H "Authorization: Bearer $ORG_PAT" \
                                  -H "X-GitHub-Api-Version: 2022-11-28" \
                                  https://api.github.com/orgs/${ORG_NAME}/repos \
                                  -d "{\"name\":\"${{ env.MODULE_NAME}}\", \"private\": false}")

          if echo "$RESPONSE" | grep -q '"full_name"'; then
            echo "Repository created successfully: $REPO_NAME"
            echo "NEW_REPO_URL=https://github.com/$REPO_NAME" >> $GITHUB_ENV
          else
            echo "Failed to create repository: $RESPONSE"
            exit 1
          fi

      - name: Push Merged Code to New Repository
        run: |
          REPO_NAME="${ORG_NAME}/${{ env.MODULE_NAME }}"
          git clone "https://github.com/${{ github.repository }}.git" temp_repo
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@users.noreply.github.com"
          cd temp_repo
          git remote set-url origin "https://x-access-token:${ORG_PAT}@github.com/${REPO_NAME}.git"
          rm .github/workflows/check_module_on_pr.yml
          rm .github/workflows/post-merge-new-repo.yml
          git commit -am "Remove CI/CD workflows"
          git push --mirror

  revert_main_branch:
    if: always() # Always run this job, even if the previous job fails
    permissions:
      contents: write
      actions: read
      pull-requests: write

    runs-on: ubuntu-24.04
    needs: [create_new_repository]
    env:
      MODULE_NAME: ${{ needs.create_new_repository.outputs.module_name }}
      ORG_PAT: ${{ secrets.ORG_PAT }}

    steps:
      - name: Checkout Repository
        if: github.event.pull_request.merged == true && github.event.pull_request.head.repo.fork == true && github.event.pull_request.head.repo.owner.login != 'jasp-escience'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git User
        if: github.event.pull_request.merged == true && github.event.pull_request.head.repo.fork == true && github.event.pull_request.head.repo.owner.login != 'jasp-escience'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          # Authenticate Git with Personal Access Token (PAT)
          # git remote set-url origin "https://x-access-token:${ORG_PAT}@github.com/${{ github.repository }}.git"

      - name: Revert Main Branch to Pre-Merge State
        if: github.event.pull_request.merged == true && github.event.pull_request.head.repo.fork == true && github.event.pull_request.head.repo.owner.login != 'jasp-escience'
        run: |
          MERGE_COMMIT=$(git rev-parse HEAD)
          git revert -m 1 $MERGE_COMMIT
          git push origin main

      - name: Comment on Pull Request
        if: github.event.pull_request.merged == true && github.event.pull_request.head.repo.fork == true && github.event.pull_request.head.repo.owner.login != 'jasp-escience'
        uses: actions/github-script@v6
        # env:
        #   GITHUB_TOKEN: ${{ secrets.ORG_PAT }}
        with:
          script: |
            const module_name = process.env.MODULE_NAME;
            const comment = `ðŸŽ‰ The pull request was merged. A new repository [ **${module_name}** ](https://github.com/${{ github.repository_owner }}/${module_name}) has been created in the organization with the merged content. The main branch has been reverted.`;
            github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  add_submodule:
    # if: ${{ github.event.pull_request.head.repo.fork == true }} # Only run if the PR is from a fork
    if: github.event.pull_request.merged == true && github.event.pull_request.head.repo.fork == true && github.event.pull_request.head.repo.owner.login != 'jasp-escience'
    runs-on: ubuntu-24.04
    needs: [create_new_repository]

    env:
      ORG_PAT: ${{ secrets.ORG_PAT }}
      ORG_NAME: "jasp-escience"
      MODULES_REPO: "github.com/jasp-escience/modules"
      MODULE_NAME: ${{ needs.create_new_repository.outputs.module_name }}

    steps:
      - name: Add New Repository as a Submodule in jasp-escience/modules
        run: |
          git clone https://x-access-token:${ORG_PAT}@${MODULES_REPO}.git modules_repo
          cd modules_repo

          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          git submodule add https://github.com/${ORG_NAME}/${MODULE_NAME}.git modules/${MODULE_NAME}
          git add .gitmodules modules/${MODULE_NAME}
          git commit -m "Added ${MODULE_NAME} as a submodule under modules/"
          git push origin main
